{"version":3,"sources":["components/Item.js","components/Items.js","App.js","serviceWorker.js","index.js"],"names":["Item","props","active","className","title","type","onClick","e","index","onDeleteItem","Items","values","map","item","i","key","App","defaultValues","useState","setValues","steps","setSteps","currentStep","setCurrentStep","isDisaled","setIsDisabled","newItem","setNewItem","onAddNewItem","trim","Swal","fire","btn","length","number_to_finish","Math","floor","random","interval","setInterval","current_values","items","clearInterval","item_selected","filter","btnReset","btnAdd","disabled","placeholder","value","onChange","target","onKeyPress","event","splice","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f8ab4a3f.chunk.js","sourcesContent":["import React from 'react';\n\nconst Item = (props) => {\n    const active = props.active === true ? \"item-selected\" : \"\";\n\n    const onDel = (index) =>{\n        props.onDeleteItem(index);\n    }\n\n    return (\n        <div className={`item ${active}`} title={props.title} >\n            <div>{props.title}</div>\n            <button type=\"button\" className=\"btn btn-outline-danger\" onClick={e => onDel(props.index)}>Delete</button>\n        </div>\n    )\n}\n\nexport default Item;\n","import React from 'react';\n\nimport Item from './Item';\n\n\nconst Items = (props) => {\n\n    return (\n        <div>\n            {props.values.map((item, i) =>\n                <Item key={i} index={i} title={item.title} active={item.active} onDeleteItem={props.onDeleteItem}/>\n            )}\n        </div>\n    )\n}\n\nexport default Items;","import React, { useState } from 'react';\nimport './App.css';\nimport Items from './components/Items';\nimport Swal from 'sweetalert2'\n\n\nfunction App() {\n\n  const defaultValues = [{\n    title: \"Option 1\",\n    active: false\n  }, {\n    title: \"Option 2\",\n    active: false\n  },\n  {\n    title: \"Option 3\",\n    active: false\n  }\n  ]\n\n  const [values, setValues] = useState(defaultValues);\n\n  const [steps, setSteps] = useState(0);\n  const [currentStep, setCurrentStep] = useState(0);\n  const [isDisaled, setIsDisabled] = useState(false);\n  const [newItem, setNewItem] = useState(\"\");\n\n  const onActivar = () => {\n\n    if (values.length < 2) {\n      Swal.fire(\n        'Validation',\n        'You needs to have more than 1 item',\n        'warning'\n      )\n      return;\n    }\n\n    let index = 0;\n    let i = 0;\n    let max = 100;\n    let min = 40;\n\n    let number_to_finish = Math.floor(Math.random() * (max - min)) + min;\n\n    setSteps(number_to_finish);\n\n    setIsDisabled(true);\n    let interval = setInterval(() => {\n      let current_values = values;\n\n      if (index === current_values.length) {\n        index = 0;\n      }\n      current_values = current_values.map(item => {\n        item.active = false;\n        return item;\n      });\n\n      current_values[index].active = true;\n      setValues(items => [...current_values]);\n\n      setCurrentStep(i);\n\n      if (i === number_to_finish) {\n        clearInterval(interval);\n        setIsDisabled(false);\n\n        let item_selected = current_values.filter(item => item.active);\n        Swal.fire(\n          'Finished',\n          `Option Selected: ${item_selected[0].title}`,\n          'success'\n        )\n      }\n\n      index += 1;\n      i += 1;\n    }, 150)\n  }\n\n  const onReset = () => {\n    setSteps(0);\n    setCurrentStep(0);\n    setNewItem(\"\");\n    setValues(items => [...defaultValues]);\n\n  }\n\n  const onDeleteItem = (index) => {\n    if (isDisaled) {\n      return;\n    }\n    let current_values = values;\n    current_values.splice(index, 1);\n    setValues(items => [...current_values]);\n\n  }\n\n  const onAddNewItem = () => {\n    if (newItem.trim() === \"\") {\n      Swal.fire(\n        'Validation',\n        'Please put a value',\n        'warning'\n      )\n    } else {\n      setValues(values => [...values, {\n        title: newItem.trim(),\n        active: false\n      }]);\n      setNewItem(\"\");\n\n    }\n\n  }\n\n  let btn = <button type=\"button\" className=\"btn btn-primary btn-start\" onClick={onActivar}>Start</button>;\n  let btnReset = <button type=\"button\" className=\"btn btn-outline-primary\" onClick={onReset}>Reset</button>;\n  let btnAdd = <button type=\"button\" className=\"btn btn-primary btn-add\" onClick={onAddNewItem}>+</button>;\n\n\n  if (isDisaled) {\n    btn = <button type=\"button\" className=\"btn btn-primary btn-start\" disabled>Start</button>;\n    btnReset = <button type=\"button\" className=\"btn btn-outline-primary\" disabled>Reset</button>;\n    btnAdd = <button type=\"button\" className=\"btn btn-primary btn-add\" disabled>+</button>;\n  }\n\n  return (\n    <div className=\"container\">\n\n      <div className=\"title\">Random Items <br /><br />\n\n        <div className=\"row\">\n          <div className=\"col-md-11\">\n            <input className=\"form-control form-control-lg\" type=\"text\" placeholder=\"Add New Item\"\n              value={newItem} onChange={e => setNewItem(e.target.value)}\n              onKeyPress={event => {\n                if (event.key === 'Enter') {\n                  onAddNewItem();\n                }\n              }}\n            /><br></br>\n\n          </div>\n          <div className=\"col-md-1\">\n            {btnAdd}\n          </div>\n        </div>\n      </div> <br></br>\n      <div className=\"content-header\">\n        {btn}\n        {btnReset}\n      </div>\n      <br></br>\n      <div className=\"info-box\">\n        Random Step: <span className=\"badge badge-primary\">{steps}</span>\n        <br></br>\n        Current Step: <span className=\"badge badge-primary\"> {currentStep}</span>\n      </div>\n      <div>\n        <Items values={values} onDeleteItem={onDeleteItem}></Items>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}